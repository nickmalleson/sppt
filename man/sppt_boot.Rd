% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sppt_boot.R
\name{sppt_boot}
\alias{sppt_boot}
\title{Performs a Spatial Point Pattern Test (SPPT) with resampling of
both Base and Test datasets}
\usage{
sppt_boot(base_points.sp, test_points.sp, uoa.sp, nsamples = 200,
  percpoints = 100, conf_level = 95, replacement = TRUE)
}
\arguments{
\item{base_points.sp}{the base points spatialobject}

\item{test_points.sp}{the test points spatialobject}

\item{uoa.sp}{the units of analysis spatial object}

\item{nsamples}{number of samples in simulations, default = 200}

\item{percpoints}{percentage of points used in simulations, default = 100}

\item{conf_level}{confidence interval, default = 95}

\item{replacement}{should sampling be done with replacement? default = TRUE}

\item{outputlist}{should the output of the function be a list, including all simulation runs as a matrix? default = FALSE}
}
\value{
Returns the \code{uoa.sp} spatialobject including SPPT outcomes.
}
\description{
This is a point pattern test that measures the degree of
similarity at the local level between two spatial point patterns
and is an area-based test. \cr
This function is different from the original sppt() in that it
does a resampling procedure on both Base and Test data, and then for each
unit of analysis the difference between the two percentages
is calculated immediately (and this is done nsamples times). If the
95% distribution of the differences between (resampled) Base and Test
percentages excludes 0, they are deemed statistically different from each
other. \cr
With the standard settings of percpoints = 100 and replacement = TRUE,
it's a real bootstrap procedure: (a) for each sampling loop (nsamples of
times) as many points are sampled as present in the data (so no longer a 85%
selection!); (b) points are sampled WITH replacement.\cr
If one wants to mimic the behavior of standard sppt() but with the added
improvement that the choice of Base and Test data does not affect results,
set percpoints to 85 and replacement to FALSE.
}
\examples{
# Plot areas, base points data, and test points data
plot(areas.sp)
text(coordinates(areas.sp), label = areas.sp$ID)
text(coordinates(points1.sp), label = points1.sp$ID, col="blue")
text(coordinates(points2.sp), label = points2.sp$ID, col="red")

set.seed(76772)
myoutput <- sppt_boot(base_points.sp = points1.sp, test_points.sp = points2.sp, uoa.sp = areas.sp)
summary.sppt(myoutput)
myoutput@data

# is exactly the same as:
set.seed(76772)
myoutput <- sppt_boot(points1.sp, points2.sp, areas.sp, nsamples=200, percpoints=100, conf_level=95, replacement=TRUE)
myoutput@data

# Vancouver data
set.seed(9866)
myoutput <- sppt_boot(vancouver_points1.sp, vancouver_points2.sp, vancouver_areas.sp)
summary.sppt(myoutput)

# Global-S may not be exactly the same when switching Base for Test
# due to random sampling procedure. Compare by doing the sppt_boot() 20 times:
# some global-s values should be the same
set.seed(85335)
reps.output <- replicate(20, mean(sppt_boot(vancouver_points1.sp, vancouver_points2.sp, vancouver_areas.sp)$globalS.robust, na.rm=TRUE))
set.seed(85335)
reps.output2 <- replicate(20, mean(sppt_boot(vancouver_points2.sp, vancouver_points1.sp, vancouver_areas.sp)$globalS.robust, na.rm=TRUE))
reps.output
reps.output2
reps.output \%in\% reps.output2

# Mimic the original sppt procedure but with resampling of both Base and Test
set.seed(9866)
myoutput <- sppt_boot(base_points.sp = points1.sp, test_points.sp = points2.sp, uoa.sp = areas.sp, percpoints=85, replacement=FALSE)
summary.sppt(myoutput)
myoutput@data

}
